
import { ListView } from "std-widgets.slint";
struct SearchData {
    name: string,
    artist: string,
    url: string,
    image: image,
    result_type: int
}


component Loading inherits Rectangle {
    in property <bool> ball-position;

    width: 100px;
    height: 50px;

    VerticalLayout {
        Text {
            horizontal-alignment: center;
            text: "loading";
            font-size: 14px;
        }
        Rectangle {
            width: 20px;
            height: 20px;
            border-radius: 10px;
            background: #ffffff;
            x: ball-position ? 10px : 90px; 
            animate x {
                duration: 500ms;
                easing: ease-in-out;
            }
        }
    }
    
}


export component SearchResult inherits Rectangle {
    height: 60px;
    //width: 100%;

    in property <string> name <=> name.text;
    in property <string> artist <=> artist.text;
    in property <string> url;
    in property <int> result_type; // song = 0, album = 1, artist = 2
    in property <image> image <=> img.source;

    inner := Rectangle {
        height: 60px;
        padding: 5px;
        TouchArea {
            clicked => {SearchScreen.play-track(root.name, root.url, root.result-type)}
            HorizontalLayout {
                //padding-left: 5px;
                Rectangle {
                    width: 50px;
                    img := Image {
                        width: 50px;
                        height: 50px;
                    }
                }
                Rectangle {
                    width: 100%;
                    padding: 10px;
                    VerticalLayout {
                        alignment: start;
                        padding-top: 5px;
                        padding-left: 10px;
                        spacing: 2px;
                        name := Text {
                            font-size: 14px;
                        }
                        artist := Text {
                            font-size: 10px;
                        }
                        type := Text {
                            text: display-result-type(result-type);
                        }
                    }
                }

            }
        }
    }

    public pure function display_result_type(value: int) -> string {
        value == 0 ? "Track" : ( value == 1 ? "Album" : "Artist")
    }

}

export component Search inherits Rectangle {
    background: #2b2b2b;
    min-width: 460px;
    
    in property <bool> is-loading <=> SearchScreen.is-loading;
    in-out property <[SearchData]> results <=> SearchScreen.search_results;

    VerticalLayout {
        alignment: start;
        padding-left: 5px;
        spacing: 2px;
        Rectangle {
            height: 15px;
        }

        if (!is-loading) : ListView {
            height: 100%;

            for result[i] in results : SearchResult {
                name: result.name;
                artist: result.artist;
                url: result.url;
                result-type: result.result-type;
                image: result.image;
            }

        }

        if (is-loading) : Loading {
            
            ball-position <=> SearchScreen.loading-ball-position;
        }



    }

}



export global SearchScreen {
    in property <[SearchData]> search_results;
    callback play_track(string, string, int); //name, artist, result-type ([0,1,2] => [song, album, artist])

    in-out property <bool> loading-ball-position; //changes every 500ms, false = left, true = right, used for animating the loading ball, 
    in-out property <bool> is-loading; //should display the loading screen
}

