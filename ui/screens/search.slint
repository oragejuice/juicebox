
import { ListView , HorizontalBox} from "std-widgets.slint";

struct SearchData {
    name: string,
    artist: string,
    url: string,
    image: image,
    result_type: int
}


component Loading inherits Rectangle {
    in property <bool> ball-position;


    VerticalLayout {
        Text {
            horizontal-alignment: center;
            text: "loading";
            font-size: 14px;
        }
        Rectangle {
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background: #ffffff;
            x: ball-position ? 10px : 90px; 
            animate x {
                duration: 500ms;
                easing: ease-in-out;
            }
        }
    }
    
}

component AlbumTrack inherits Rectangle {
    in property <string> name <=> name_text.text;
    in property <string> artist <=> artist_text.text;
    in property <string> url;
    callback clicked <=> touch.clicked;

    HorizontalLayout {
        name_text := Text {}
        artist_text := Text {}
    }
    
    touch := TouchArea {}
}

struct AlbumTrackData {
    name: string,
    url: string,
}

export component Album inherits Rectangle {

    in property <string> name <=> album_name.text;
    in property <string> artist <=> album_artist.text;
    in property <string> url;
    in property <image> image <=> img.source;

    in property <[AlbumTrackData]> tracks <=> AlbumScreen.album_tracks;

    VerticalLayout {
        img := Image {
            width: 100px;
            height: 100px;
        }
        album_name := Text {}
        album_artist := Text {}
        ListView { 
            height: 100%;
            for data[i] in tracks : AlbumTrack {
                name: data.name;
                url: data.url;
                clicked => {
                    debug("AHHH");
                    SearchScreen.play-track(data.name, data.url, 0);
                }
            }
         }
    }
    
}


export component SearchResult inherits Rectangle {
    height: 60px;
    //width: 100%;

    in property <string> name <=> name.text;
    in property <string> artist <=> artist.text;
    in property <string> url;
    in property <int> result_type; // song = 0, album = 1, artist = 2
    in property <image> image <=> img.source;

    inner := Rectangle {
        height: 60px;
        padding: 5px;
        TouchArea {
            clicked => {SearchScreen.play-track(root.name, root.url, root.result-type)}
            HorizontalLayout {
                //padding-left: 5px;
                Rectangle {
                    width: 50px;
                    img := Image {
                        width: 50px;
                        height: 50px;
                    }
                }
                Rectangle {
                    width: 100%;
                    padding: 10px;
                    VerticalLayout {
                        alignment: start;
                        padding-top: 5px;
                        padding-left: 10px;
                        spacing: 2px;
                        name := Text {
                            font-size: 14px;
                        }
                        artist := Text {
                            font-size: 10px;
                        }
                        type := Text {
                            text: display-result-type(result-type);
                        }
                    }
                }

            }
        }
    }

    public pure function display_result_type(value: int) -> string {
        value == 0 ? "Track" : ( value == 1 ? "Album" : "Artist")
    }

}

export component Search inherits Rectangle {
    background: #2b2b2b;
    min-width: 460px;
    
    in property <bool> is-loading <=> SearchScreen.is-loading;
    in-out property <[SearchData]> results <=> SearchScreen.search_results;
    in-out property <bool> showing-album <=> SearchScreen.showing-album;

    VerticalLayout {
        alignment: start;
        padding-left: 5px;
        spacing: 2px;
        Rectangle {
            height: 15px;
        }

        if (!is-loading && !showing-album) : ListView {
            height: 100%;

            for result[i] in results : SearchResult {
                name: result.name;
                artist: result.artist;
                url: result.url;
                result-type: result.result-type;
                image: result.image;
            }
        }

        if (!is-loading && showing-album) : Album {
            name: AlbumScreen.album-name;
            artist: AlbumScreen.album-arist;
            image: AlbumScreen.album-art;
        }

        if (is-loading) : HorizontalBox {
            alignment: center;
            Loading {
                ball-position <=> SearchScreen.loading-ball-position;
            }
        }

    }

}

export global SearchScreen {
    in property <[SearchData]> search_results;
    callback play_track(string, string, int); //name, artist, result-type ([0,1,2] => [song, album, artist])

    in-out property <bool> loading-ball-position; //changes every 500ms, false = left, true = right, used for animating the loading ball, 
    in-out property <bool> is-loading; //should display the loading screen
    in-out property <bool> showing-album;
}

export global AlbumScreen {
    in property <[AlbumTrackData]> album_tracks;
    in property <string> album-name;
    in property <string> album-arist;
    in property <image> album-art;


}

